@startuml
' ======== Abstract Classes and Enumerations ========
enum Difficulty {
Easy
Medium
Hard
}

enum Operation {
Addition
Substraction
Multiplication
Division
}

' ======== Data & Persistence ========
abstract class DataPersistence {
+save()
+retrieve()
}

' ======== User/Account Domain ========
abstract class User {
+int userId
+String username
+String password
+boolean isAuthorized
+login()
+logout()
+signUp()
}

abstract class Player {
+playGame()
+viewStatistics()
+togglePrivate()
}

User <|-- Player

' ======== Application Session ========
abstract class AppSession {
+int sessionId
+startSession()
+endSession()
+navigateToPage()
}

' ======== Application Pages ========
abstract class AppPage {
+loadPage()
+renderContent()
}

abstract class GamePage extends AppPage {
+startGame()
+saveScore()
}

class MathGamePage extends GamePage {
-int score
-string question
-List<int> options
-boolean? isCorrect
+generateQuestion()
+checkAnswer(int option)
}

class SudokuGamePage extends GamePage {
-int[,] grid
-int[,] solution
-int elapsedTime
-List<int> possibleValues
+generateSudoku()
+checkSolution()
}

class PairMatchingGamePage extends GamePage {
-List<Card> cards
-int matchedPairs
-int mistakes
+generateCardDeck()
+checkSelectedCards()
}

class AimTrainerPage extends GamePage {
-int score
-(int x, int y) targetPosition
-int moveDirection
+onTargetClicked()
+moveTarget()
}

class SettingsPage extends AppPage {
  +bool IsPrivateActive
  -TogglePrivate()
}


' ======== Statistics/High Score Domain ========
abstract class StatisticsPage extends AppPage {
+viewShortStats()
+viewTimeline()
+viewStatsByDifficulty()
+viewGraph()
}

class ScoreChart {
+renderChart()
}

class TimeScoreChart {
+renderTimeChart()
}

StatisticsPage -- ScoreChart
StatisticsPage -- TimeScoreChart


AppSession o-- AppPage
AppSession o-- Player

' ======== Timer Service ========
class TimerService {
+int RemainingTime
+Start()
+Stop()
+OnTick()
}

GamePage *-- TimerService


' ======== Services (Subset) ========
abstract class AuthService {
+authorize()
+register()
}
User ..> AuthService

' ======== Controllers ========
class AccountScoreController <<Controller>> {
+GetGameScores()
+GetGameHighscore()
+GetGameMatchesPlayed()
+GetGameAverageScore()
+GetGameAverageScoreLast7Days()
}

AccountScoreController ..> DataPersistence

class AimTrainerController <<Controller>> {
+SaveScoreAsync()
+GetUserHighscoreAsync()
+GetTopScoresAsync()
}

class MathGameController <<Controller>> {
+GetQuestion()
+GetOptions()
+CheckAnswer()
+SaveScoreAsync()
+GetUserHighscoreAsync()
+GetTopScoresAsync()
}

class PairUpController <<Controller>> {
+SaveScoreAsync()
+GetUserHighscoreAsync()
+GetTopScoresAsync()
}

class SudokuController <<Controller>> {
+GenerateSolvedSudoku()
+HideNumbers()
+SaveScoreAsync()
+GetUserHighscoreAsync()
+GetTopScoresAsync()
}

class UserController <<Controller>> {
+CreateUserAsync()
+LogInAsync()
+LogOff()
+GetUsernamesAsync()
+ChangePrivateAsync()
+GetPrivateAsync()
}

' ======== Relationships for Controllers ========
AuthService ..> UserController
MathGamePage ..> MathGameController
PairMatchingGamePage ..> PairUpController
SudokuGamePage ..> SudokuController
AimTrainerPage ..> AimTrainerController
SettingsPage ..> UserController
StatisticsPage ..> AccountScoreController

AimTrainerController ..> DataPersistence
MathGameController ..> DataPersistence
PairUpController ..> DataPersistence
SudokuController ..> DataPersistence
UserController ..> DataPersistence
@enduml